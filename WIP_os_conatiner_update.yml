---
- name: Detect Updated Images for Running Containers
  hosts: all
  become: true

  tasks:
    - name: Get a list of running containers
      containers.podman.podman_container: state=running
      register: running_containers

    - name: Get the image ID for each running container
      with_items: "{{ running_containers.results }}"
      ansible.builtin.set_fact:
        container_image_id: '"{{ item.id }}"'

    - name: Inspect each container to get the image
      containers.podman.podman_container: state=inspect
      with_items: "{{ container_image_id }}"
      register: container_images

    - name: Get the image name for each container
      with_items: "{{ container_images.results }}"
      ansible.builtin.set_fact:
        container_image_name: '"{{ item.Config.Image }}"'

    - name: Check for updates to each image
      register: image_updates
      with_items: "{{ container_image_name }}"
      ansible.builtin.command: podman images --format "{{.ID}} {{.Repo}} {{.Tag}}" | grep "{{ container_image_name }}"

    - name: Print updated images
      when: image_updates.results.stdout != container_image_id

      ansible.builtin.debug:
        msg: "Image {{ item.item }} has an update available. New image ID: {{ item.results.stdout.split()[0] }}"

    - name: Delete old image if an update is available
      when: image_updates.results.stdout != container_image_id
      with_items: "{{ container_image_name }}"
      ansible.builtin.command: podman rmi {{ item.results.stdout.split()[0] }}

    - name: Restart container if image was deleted
      containers.podman.podman_container: state=restart
      when: image_updates.results.stdout != container_image_id
      with_items: "{{ container_image_id }}"
